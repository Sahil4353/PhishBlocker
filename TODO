Here’s your fresh, **single-sprint status snapshot**—reflecting everything we just wired and tightened on `feat/api-scan-endpoint` (NZT: 4 Sep 2025).

# PhishBlocker — Status Snapshot (latest)

## What’s done ✅

### App / APIs / Infra

* **FastAPI app** with app-factory + lifespan; request-ID middleware; env-driven logging.
* **Routers**

  * **Pages (HTML):** `/`, `POST /scan`, `/history`, `/scan/{id}/view`
  * **API (JSON):** `POST /api/scan`, `GET /api/scans`, `GET /api/scan/{id}`, `GET /export/csv`
* **DB & models:** `Email` + `Scan` with FKs + indexes. Added **sanity constraints** (`has_text/has_html ∈ {0,1}`, `attachments_count ≥ 0`, confidence in \[0,1]).
* **Lifespan boot:** model artifact auto-loaded to `app.state.model` from `MODEL_PATH|MODEL_ARTIFACT|MODEL_FILE` (fallback to `models/tfidf_lr_small_l2.joblib`). Graceful fallback to heuristics if missing.

### Services

* **Model loader (`services/model.py`)**

  * Handles dict bundles or plain pipelines; tolerant feature-name extraction; LR-coef explanations; binary/multiclass safe; works behind `CalibratedClassifierCV`.
  * Public API kept: `predict_with_explanations(text)->(label, prob, reasons)` + `predict_proba_map(text)`.
* **Scan pipeline (`services/scan_pipeline.py`)**

  * Persists `Email` (normalized) + `Scan`.
  * Uses **heuristics** + optional **ML**.
  * Stores legacy `Scan.reasons` as comma-joined tokens **and** (when present) rich outputs in `details_json` / `probs_json` (compat aliases on the model).
* **Heuristics (`services/heuristics.py`)**

  * Better URL detection (IPv6, `user@host`), word-boundary signals, light “spam” features (caps/exclaims/\$), confidence clipping.
* **Parser (`services/parser.py`)**

  * Decodes RFC-2047 headers, unfolds, normalizes body text; extracts URLs (dedup/trim); gathers IPv4/IPv6 from `Received`.

### Models

* **Scan model:** alias properties `details_json` ⇄ `details`, `probs_json` ⇄ `probs` to avoid migrations; indexes on created/label/sender/email\_id.
* **Email model:** constraints for 0/1 flags and non-negative attachments.

### UI

* **Index:** copy updated (ML + heuristics fallback), “Try examples” quick-fill, trim-on-submit.
* **History:** formatted timestamps; label chips; CSV export form; stable actions.
* **Detail:** shows label + confidence; **optional class probability bars** (auto-render when `scan.probs` is provided); “Reasons” from legacy string or `details_json.reasons`.
* **Macros:** cleaner, readable **label chips** (color-blind friendly palette).

### CSV Export

* `/export/csv` hardened (UTF-8, safe coercion, date filters, Excel-safe).

---

## What changed since last snapshot 🔄

* New **typed API**: `/api/scan`, `/api/scans`, `/api/scan/{id}` (+ response models).
* **Pages** now call the **same pipeline** (`create_scan_from_text`) as the API.
* **App boot** loads model into `app.state.model`; continues with heuristics if not present.
* **Parser/Heuristics** significantly improved; safer confidences & reasons trimmed.
* **Model explanations** robust; feature-name extraction no longer brittle.
* **Scan model** now supports rich JSON outputs without a schema rename (alias props).

---

## Smoke checklist (now)

```powershell
# deps (Windows-friendly)
python -m pip install "uvicorn[standard]" fastapi "sqlalchemy>=2" jinja2 "pydantic>=2" scikit-learn joblib python-multipart beautifulsoup4

# run (module form works everywhere)
python -m uvicorn app.main:app --reload

# API test
curl -s -X POST http://127.0.0.1:8000/api/scan `
  -H "Content-Type: application/json" `
  -d '{"text":"verify your account urgently to continue","subject":"Action needed","sender":"alerts@example.com"}'

# Pages
# http://127.0.0.1:8000/   (scan)
# http://127.0.0.1:8000/history
# http://127.0.0.1:8000/scan/1/view
```

---

## Open nits / quick wins

* **Optional**: include `probs` in the JSON payload for pages/API (we already store it; not exposed in `_scan_to_payload`). If you want the bars on HTML to always show, I can add that to the router.
* **Pre-commit / CI** (from earlier plan): add ruff/black hooks + minimal pytest smoke.
* **Threshold policy**: read from metrics JSON & expose as UI selector (best-F1 / prec\@95 / prec\@98).
* **Dev-only endpoint**: `/api/_reload_model` to clear cache/hot reload artifacts.

---

## Branches & workflow

* You’re working on **`feat/api-scan-endpoint`** (active).
* (Optional) Small UI tweaks can land on short-lived branches from current HEAD; PR back into `feat/api-scan-endpoint`, then into `develop`.

---

## Commits added in this sprint (suggested messages)

* `feat(api): add typed /api routes and avoid page-route collisions`
* `fix(api): align create_scan_from_text kwarg (text→body_text) to match service`
* `feat(app): load ML model in app lifespan and expose as app.state.model`
* `feat(services): persist scans with ML details + legacy reasons string`
* `feat(models): add alias properties for details_json/probs_json on Scan`
* `chore(models): add sanity checks to Email (0/1 flags and non-negative attachments)`
* `feat(parser): decode RFC-2047 headers, collect IPv6 from Received, and harden URL/body extraction`
* `feat(heuristics): improve URL detection & scoring; keep API stable`
* `feat(ui): polish scan form + try-examples`
* `chore(ui): format created_at and polish history table`
* `feat(ui): add optional class probability bars on scan detail`
* `feat(ui): refresh label_chip styles with clearer colors and readability`

---

## TL;DR

✅ **M1 (MVP polish) is effectively wired end-to-end**: forms → service → model → DB → pages/API, with robust loader + explanations.
If you want, I’ll do the tiny router tweak to expose `probs` on the detail payload so the probability bars always render.
